<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg
    onload="init(evt)"
    xmlns="http://www.w3.org/2000/svg"
    id="svg8"
    version="1.1"
    viewBox="0 0 506 306">
    <style>
        .heading {
            fill: #262626;
            font-family: "Impact", "Arial Black", "Gadget", "sans-serif";
        }
        .number {
            fill: #404040;
            font-family: "Impact", "Arial Black", "Gadget", "sans-serif";
        }
        .numberSmall {
            fill: #808080;
            font-family: "Impact", "Arial Black", "Gadget", "sans-serif";
        }
    </style>
    <defs id="filters">
        <ref id="paramColor" param="color" default="#008282"/>
        <ref id="paramWordTypes" param="wordTypes" />

        <filter id="dropShadow_bg">
            <feFlood flood-color="#3D4574" flood-opacity="0.5" result="offsetColor"/>
            <feGaussianBlur in="SourceAlpha" stdDeviation="1.3" />
            <feOffset dx="3" dy="3" result="offsetBlur"/>
            <feComposite in="offsetColor" in2="offsetBlur" operator="in"/>
            <feMerge>
                <feMergeNode />
                <feMergeNode in="SourceGraphic" />
            </feMerge>
        </filter>
        <filter id="dropShadow_slice">
            <feFlood flood-color="#3D4574" flood-opacity="0.5" result="offsetColor"/>
            <feGaussianBlur in="SourceAlpha" stdDeviation="1.3" />
            <feOffset dx="1" dy="1" result="offsetBlur"/>
            <feComposite in="offsetColor" in2="offsetBlur" operator="in"/>
            <feMerge>
                <feMergeNode />
                <feMergeNode in="SourceGraphic" />
            </feMerge>
        </filter>
        <filter id="blurABit">
            <feGaussianBlur in="SouceImage" stdDeviation=".1"/>
        </filter>
        
    </defs>
    <g id="widget">
        <g id="background"
           height='300'
           width='500'
        >
            <rect
                id="background_sheet"
                fill="#ffffff"
                filter="url(#dropShadow_bg)"
                width="500"
                height="300"
                ry="20"
                rx="20"
                y="0"
                x="0" 
                onclick="clear_click()"
            />
        </g>
        <text id="heading" x="15" y="25" dy=".3em" textLength="200" lengthAdjust="spacingAndGlyphs" class="heading" font-size="22" text-anchor="start">
            Most Frequent Known Words
        </text>
        <text id="total" x="115" y="100" dy=".3em" class="number" font-size="80" text-anchor="middle">
            5126
        </text>
        <text id="diff" x="115" y="150" dy=".3em" class="numberSmall" font-size="10" text-anchor="middle">
            +20 since last week
        </text>
        <g id="plot">
            <circle cx="325" cy="140" r="110" fill="#d9d9d9" />
        </g>
        <g id="plot_labels">  
            <circle cx="325" cy="140" r="50" fill="#f2f2f2" />
        </g>
    </g>

    <script type="text/javascript"><![CDATA[

    function init(e) {
        add_slice("a", .00000, .041666);
        add_slice("b", .08333, .041666);
        add_slice("c", .16666, .041666);
        add_slice("d", .25000, .041666);
        add_slice("e", .33333, .041666);
        add_slice("f", .41667, .041666);
        add_slice("g", .50000, .041666);
        add_slice("h", .58333, .041666);
        add_slice("i", .66667, .041666);
        add_slice("j", .75000, .041666);
        add_slice("k", .83333, .041666);
        add_slice("l", .91667, .041666);
        add_slice("ua", .00000, .041666);
        add_slice("ub", .08333, .041666);
        add_slice("uc", .16666, .041666);
        add_slice("ud", .25000, .041666);
        add_slice("ue", .33333, .041666);
        add_slice("uf", .41667, .041666);
        add_slice("ug", .50000, .041666);
        add_slice("uh", .58333, .041666);
        add_slice("ui", .66667, .041666);
        add_slice("uj", .75000, .041666);
        add_slice("uk", .83333, .041666);
        add_slice("ul", .91667, .041666);
    }

    // Hue is float 0-1. size is in ratio of cirle (1/4 = 90deg)
    function add_slice(wordType, hue, size) {
        if (typeof add_slice.end == 'undefined') add_slice.end = -.25;
        start = add_slice.end;
        end   = add_slice.end + size + .00075;
        color = wordType.charAt(0)=='u' ? hslToRgb(hue, 1.0, .75) : hslToRgb(hue, 1.0, .2)

        let slice     = document.createElementNS("http://www.w3.org/2000/svg", "path");
        let text_main = document.createElementNS("http://www.w3.org/2000/svg", "text");
        let text_alt  = document.createElementNS("http://www.w3.org/2000/svg", "text");
        let text_desc = document.createElementNS("http://www.w3.org/2000/svg", "text");

        slice.setAttribute('id', wordType);
        slice.setAttribute('fill', color);
        slice.setAttribute('d', describeArc(325, 140, 110, start*360, end*360));

        slice.addEventListener('mouseover', (evt) => handle_slice_emphasis(evt, wordType) );
        slice.addEventListener('mouseout',  (evt) => handle_slice_emphasis(evt, wordType) );
        slice.addEventListener('click',     (evt) => handle_slice_emphasis(evt, wordType) );

        text_main.setAttribute('id', wordType+'_text_main');
        text_main.setAttribute('fill', hslToRgb(hue, 1.0, .1));
        text_main.setAttribute('filter', 'dropShadow_slice');
        text_main.setAttribute('x', 325);
        text_main.setAttribute('y', 140);
        text_main.setAttribute('dy', '.4em');
        text_main.setAttribute('text-anchor', 'middle');
        text_main.setAttribute('font-family', '"Impact", "Arial Black", "Gadget", "sans-serif"');
        text_main.setAttribute('font-size', 32);
        text_main.textContent  = "100%"
        text_main.setAttribute('visibility', 'hidden');

        text_alt.setAttribute('id', wordType+'_text_alt');
        text_alt.setAttribute('fill', hslToRgb(hue, 1.0, .1)+"80");
        text_alt.setAttribute('filter', 'dropShadow_slice');
        text_alt.setAttribute('x', 325);
        text_alt.setAttribute('y', 120);
        text_alt.setAttribute('text-anchor', 'middle');
        text_alt.setAttribute('font-family', '"Impact", "Arial Black", "Gadget", "sans-serif"');
        text_alt.setAttribute('font-size', 12);
        text_alt.textContent  = "32099"
        text_alt.setAttribute('visibility', 'hidden');

        text_desc.setAttribute('id', wordType+'_text_desc');
        text_desc.setAttribute('fill', hslToRgb(hue, 1.0, .1)+"80");
        text_desc.setAttribute('filter', 'dropShadow_slice');
        text_desc.setAttribute('x', 325);
        text_desc.setAttribute('y', 165);
        text_desc.setAttribute('text-anchor', 'middle');
        text_desc.setAttribute('textLength', 100);
        text_desc.setAttribute('font-family', '"Impact", "Arial Black", "Gadget", "sans-serif"');
        text_desc.setAttribute('font-size', 8);
        text_desc.textContent  = "Unknown Adjective Pronouns"
        text_desc.setAttribute('visibility', 'hidden');

        document.getElementById('plot_labels').appendChild(text_main);
        document.getElementById('plot_labels').appendChild(text_alt);
        document.getElementById('plot_labels').appendChild(text_desc);        
        document.getElementById('plot').appendChild(slice);

        add_slice.end = end - .00075;
    }

    // returns rgb string.
    function hslToRgb(h, s, l) {
        var r, g, b;

        if(s == 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function hue2rgb(p, q, t){
                if(t < 0) t += 1;
                if(t > 1) t -= 1;
                if(t < 1/6) return p + (q - p) * 6 * t;
                if(t < 1/2) return q;
                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                return p;
            }

            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1/3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1/3);
        }
        r = Math.round(r * 255).toString(16);
        r = r.length<2 ? r.concat("0") : r;
        g = Math.round(g * 255).toString(16);
        g = g.length<2 ? g.concat("0") : g;
        b = Math.round(b * 255).toString(16);
        b = b.length<2 ? b.concat("0") : b;

        return "#" + r + g + b;
    } 

    function clear_click() {
        if (handle_slice_emphasis.clicked_slice != null && 
            handle_slice_emphasis.clicked_slice != ""
            )
            deemphasize_slice(handle_slice_emphasis.clicked_slice);
        handle_slice_emphasis.click_enabled = false;
        handle_slice_emphasis.clicked_slice = "";
    }

    function handle_slice_emphasis(evt, wordType) {
        if (typeof handle_slice_emphasis.click_enabled == 'undefined') 
            handle_slice_emphasis.click_enabled = false;
        if (typeof handle_slice_emphasis.clicked_slice == 'undefined') 
            handle_slice_emphasis.clicked_slice = "";

        switch (evt.type) {
            case 'mouseover':
                if (!handle_slice_emphasis.click_enabled) 
                    emphasize_slice(wordType);
                break;

            case 'mouseout':
                if (!handle_slice_emphasis.click_enabled) 
                    deemphasize_slice(wordType);
                break;

            case 'click':
                if (handle_slice_emphasis.click_enabled) {
                    if (handle_slice_emphasis.clicked_slice == wordType) {
                        clear_click();
                    }
                    else {
                        deemphasize_slice(handle_slice_emphasis.clicked_slice);
                        handle_slice_emphasis.clicked_slice = wordType;
                        emphasize_slice(wordType);
                    }
                }
                else {
                    handle_slice_emphasis.click_enabled = true;
                    handle_slice_emphasis.clicked_slice = wordType;
                    emphasize_slice(wordType);
                }
                break;

            default:
                break;
        }
    }

    function emphasize_slice(wordType) {
        let slice     = document.getElementById(wordType);
        let text_main = document.getElementById(wordType+'_text_main');
        let text_alt  = document.getElementById(wordType+'_text_alt');
        let text_desc = document.getElementById(wordType+'_text_desc');

        slice.setAttribute('filter', 'url(#dropShadow_slice)');
        slice.setAttribute('transform', 'translate(-6.6, -3.0) scale(1.02, 1.02)');

        text_main.setAttribute('visibility', 'visible');
        text_alt.setAttribute('visibility', 'visible');
        text_desc.setAttribute('visibility', 'visible');

        slice.parentNode.appendChild(slice);
    }

    function deemphasize_slice(wordType) {
        let slice     = document.getElementById(wordType);
        let text_main = document.getElementById(wordType+'_text_main');
        let text_alt  = document.getElementById(wordType+'_text_alt');
        let text_desc = document.getElementById(wordType+'_text_desc');

        slice.setAttribute('filter', 'null');
        slice.setAttribute('transform', 'translate(0, 0)');

        text_main.setAttribute('visibility', 'hidden');
        text_alt.setAttribute('visibility', 'hidden');
        text_desc.setAttribute('visibility', 'hidden');
    }

    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    }

    function describeArc(x, y, radius, startAngle, endAngle){
        var start = polarToCartesian(x, y, radius, endAngle);
        var end = polarToCartesian(x, y, radius, startAngle);
        var largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
        var d = [
            "M", x, y,
            "L", start.x, start.y, 
            "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y,
            "L", x, y
        ].join(" ");
        return d;       
    }

    ]]></script>
</svg>
